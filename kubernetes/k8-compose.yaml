apiVersion: v1
kind: Namespace
metadata:
  name: booking-namespace

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: booking-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: sips/user-service:latest
        ports:
        - containerPort: 9001
        env:
          - name: MONGO_HOST
            value: mongo
          - name: MONGO_PORT
            value: "27017"
          - name: MONGO_DB_NAME
            value: db
          - name: REDIS_HOST
            value: redis
          - name: REDIS_PORT
            value: "6379"
          - name: RABBITMQ_HOST
            value: rabbitmq
          - name: JWT_SECRET
            value: 'MY_JWT_SECRET'

---

apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: booking-namespace
spec:
  selector:
    app: user-service
  ports:
  - protocol: TCP
    port: 9001
    targetPort: 9001

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-service
  namespace: booking-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: booking-service
  template:
    metadata:
      labels:
        app: booking-service
    spec:
      containers:
      - name: booking-service
        image: sips/booking-service:latest
        ports:
        - containerPort: 9002
        env:
          - name: MONGO_HOST
            value: mongo
          - name: MONGO_PORT
            value: "27017"
          - name: MONGO_DB_NAME
            value: db
          - name: RABBITMQ_HOST
            value: rabbitmq

---

apiVersion: v1
kind: Service
metadata:
  name: booking-service
  namespace: booking-namespace
spec:
  selector:
    app: booking-service
  ports:
  - protocol: TCP
    port: 9002
    targetPort: 9002
  type: LoadBalancer
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: booking-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: sips/api-gateway:latest
        ports:
        - containerPort: 9000
        env:
          - name: GATEWAY_SVC_HOST
            value: api-gateway
          - name: USER_SVC_HOST
            value: user-service
          - name: BOOKING_SVC_HOST
            value: booking-service

---

apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: booking-namespace
spec:
  selector:
    app: api-gateway
  ports:
  - protocol: TCP
    port: 9000
    targetPort: 9000
  type: LoadBalancer

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
  namespace: booking-namespace
spec:
  serviceName: "mongo"
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: bitnami/mongodb:6.0.8
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongo-data
          mountPath: /data/db

  volumeClaimTemplates:
  - metadata:
      name: mongo-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

---

apiVersion: v1
kind: Service
metadata:
  name: mongo
  namespace: booking-namespace
spec:
  selector:
    app: mongo
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: booking-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis
        ports:
        - containerPort: 6379

---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: booking-namespace
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: booking-namespace
spec:
  serviceName: "rabbitmq"
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.10-management
        ports:
        - containerPort: 5672
        - containerPort: 15672

---

apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: booking-namespace
spec:
  selector:
    app: rabbitmq
  ports:
  - name: rabbitmq-port-5672
    protocol: TCP
    port: 5672
    targetPort: 5672
  - name: rabbitmq-port-15672
    protocol: TCP
    port: 15672
    targetPort: 15672
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: booking-namespace
data:
  prometheus.yml: |-
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'api-gateway'
        static_configs:
          - targets: ['api-gateway:9000']

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: booking-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus
        command:
        - prometheus
        - '--config.file=/etc/prometheus/prometheus.yml'

      volumes:
      - name: prometheus-config-volume
        configMap:
          name: prometheus-config

---

apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: booking-namespace
spec:
  selector:
    app: prometheus
  ports:
  - protocol: TCP
    port: 9090
    targetPort: 9090
  type: LoadBalancer
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: booking-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana
        ports:
        - containerPort: 3000
        env:
          - name: GF_SECURITY_ADMIN_USER
            value: admin
          - name: GF_SECURITY_ADMIN_PASSWORD
            value: pass
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana

      volumes:
      - name: grafana-data
        emptyDir: {}

---

apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: booking-namespace
spec:
  selector:
    app: grafana
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  type: LoadBalancer

